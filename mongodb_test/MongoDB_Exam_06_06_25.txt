1.Find the total revenue (price × quantity) for each item, sorted from highest to lowest.
db.sales.aggregate([
  {
    $group: {
      _id: "$item",
      totalRevenue: { $sum: { $multiply: ["$price", "$quantity"] } }
    }
  },
  {
    $sort: { totalRevenue: -1 }
  }
])
2. Calculate the total quantity sold per month in 2022
db.sales.aggregate([
  {
    $match: {
      date: {
        $gte: ISODate("2022-01-01T00:00:00Z"),
        $lt: ISODate("2023-01-01T00:00:00Z")
      }
    }
  },
  {
    $group: {
      _id: { year: { $year: "$date" }, month: { $month: "$date" } },
      totalQuantity: { $sum: "$quantity" }
    }
  },
  {
    $sort: { "_id.year": 1, "_id.month": 1 }
  }
])


3.Find all items where price is greater than 10 and size is not 'Short'.
db.sales.find({
  price: { $gt: 10 },
  size: { $ne: "Short" }
})
4. Get all Cappuccino sales with quantity between 10 and 20.
db.sales.find({
  item: "Cappuccino",
  quantity: { $gte: 10, $lte: 20 }
})
5. Query to find items where the item name starts with "A"
db.sales.find({
  item: { $regex: /^A/, $options: "i" }
})
6. Find all records that do not have the field size.
db.sales.find({
  size: { $exists: false }
})
7.List all items sold in February 2022
db.sales.find({
  date: {
    $gte: ISODate("2022-02-01T00:00:00Z"),
    $lt: ISODate("2022-03-01T00:00:00Z")
  }
}, {
  item: 1,
  _id: 0
})
8.find all sales that are either "Grande" or "Tall" but not “Americanos”
db.sales.find({
  size: { $in: ["Grande", "Tall"] },
  item: { $ne: "Americanos" }
})


9.find sales where the quantity is more than twice the price
db.sales.find({
  $expr: { $gt: ["$quantity", { $multiply: [2, "$price"] }] }
})
10.find all sales where the price is greater than the average price of their respective size
db.sales.aggregate([
  {
    $group: {
      _id: "$size",
      avgPrice: { $avg: "$price" }
    }
  },
  {
    $lookup: {
      from: "sales",
      localField: "_id",
      foreignField: "size",
      as: "sales_docs"
    }
  },
  { $unwind: "$sales_docs" },
  {
    $match: {
      $expr: { $gt: ["$sales_docs.price", "$avgPrice"] }
    }
  },
  {
    $replaceRoot: { newRoot: "$sales_docs" }
  }
])




11.filter sales where the total revenue is even and exceeds 100
db.sales.aggregate([
  {
    $addFields: {
      totalRevenue: { $multiply: ["$price", "$quantity"] }
    }
  },
  {
    $match: {
      totalRevenue: { $gt: 100 },
      $expr: { $eq: [{ $mod: ["$totalRevenue", 2] }, 0] }
    }
  }
])
12.find sales where the month is prime and quantity is odd[filter sales where the month(1-12) is a prime number(2,3,5,7,11) and quantity is odd]
db.sales.aggregate([
  {
    $addFields: {
      month: { $month: "$date" }
    }
  },
  {
    $match: {
      month: { $in: [2, 3, 5, 7, 11] },
      $expr: { $eq: [{ $mod: ["$quantity", 2] }, 1] }
    }
  },
  {
    $project: { month: 0 }  
  }
])
13. Find Sales with "Suspicious Quantities" (Divisible by 5 or 7)
[Filter sales where quantity is divisible by 5 or 7]
db.sales.find({
  $expr: {
    $or: [
      { $eq: [{ $mod: ["$quantity", 5] }, 0] },
      { $eq: [{ $mod: ["$quantity", 7] }, 0] }
    ]
  }
})










































.